#!/usr/bin/env bash

set -e -o pipefail

### Constants ###

readonly TEST_DIR=projects/releases

### General Functions ###

function exit_error() {
    echo "ERROR: $*"
    exit 1
}

function start_test() {
    [[ -z "$CI" ]] || { printf '::endgroup::\n::group::%s\n' "$*" && return 0; }
    local div=${*//?/=}
    printf '%s\n%s\n%s\n' "$div" "$*" "$div"
}

# Copy over current git repo to testing directory to test any changes and avoid affecting the local repo.
function prepare_test_repo() {
    rm -rf "$TEST_DIR"

    # The `advice.detachedHead=false` setting is needed when the repo is in the middle of a rebase and such.
    git -c advice.detachedHead=false clone . "$TEST_DIR"
    cd "$TEST_DIR"
    git commit -a --allow-empty -m "Current state"
}

function _make() {
    declare -g output
    { output=$(make "$@" DRY_RUN=true 2>&1 | tee /dev/fd/5); } 5>&1
    return "$?"
}

function expect_success_running_make() {
    _make "$@" || exit_error "Expected 'make $*' to succeed, but it failed."
}

function expect_failure_running_make() {
    ! _make "$@" || exit_error "Expected 'make $*' to fail, but it succeeded."
}

function expect_make_output_to_contain() {
    local expected=$1
    grep -e "${expected}" - <<<"${output}" > /dev/null || \
        exit_error "Expected 'make release' output to contain ${expected@Q} but it didn't."
}

# In case we're targeting a branch, the commands will fail, so remove it for testing
function sanitize_branch() {
    if grep 'branch:' "releases/v${VERSION}.yaml" > /dev/null ; then
        sed -i '/^branch:.*/d' "releases/v${VERSION}.yaml"
        git commit -a -m "Remove branch or make release will fail" > /dev/null
    fi
}

