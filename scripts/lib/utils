# shellcheck shell=bash
# shellcheck disable=SC2034 # We declare some shared variables here

readonly PROJECTS=(admiral cloud-prepare lighthouse shipyard subctl submariner submariner-charts submariner-operator)
readonly REPO="quay.io/submariner"
readonly PROJECTS_PROJECTS=(cloud-prepare lighthouse submariner)
readonly INSTALLER_PROJECTS=(submariner-operator)
readonly RELEASED_PROJECTS=(subctl submariner-charts)

ORG=${ORG:-${GITHUB_REPOSITORY_OWNER:-$(git config --get remote.origin.url | awk -F'[:/]' '{print $(NF-1)}')}}
declare -A NEXT_STATUS=( [branch]=shipyard [shipyard]=admiral [admiral]=projects [projects]=installers [installers]=released )

function printerr() {
    >&2 echo "ERROR: $*"
}

function exit_error() {
    local DEBUG_PRINT=false
    printerr "$*"
    exit 1
}

function count_parents() {
    local DEBUG_PRINT=false
    git cat-file -p "$1" | grep -c "^parent "
}

function determine_target_release() {
    local commit_id=HEAD

    # In case of a merge commit, select the commit before it from the 2nd head (the tree being merged)
    if [[ $(count_parents HEAD) -gt 1 ]]; then
        commit_id="HEAD^2"

        # In case the parent is also a merge commit, select its first parent (which is the tip of the PR)
        [[ $(count_parents HEAD^2) -gt 1 ]] && commit_id="HEAD^2^1"
    fi

    file=$(git diff-tree --name-only -r "${commit_id}" | grep -m1 "releases/v.*\.yaml" || :)

    if [[ -z "$file" ]]; then
        echo "WARN: Couldn't detect a target release file, skipping."
        exit 0
    fi
}

function read_release_file() {
    local DEBUG_PRINT=false
    declare -gA release

    function _read() {
        local key=$1
        release[$key]=$(yq e ".${key} // \"\"" "$file")
    }

    _read 'version'
    _read 'name'
    _read 'release-notes'
    _read 'status'
    _read 'branch'
    _read 'components'
    for project in "${PROJECTS[@]}"; do
        _read "components.${project}"
    done
}

# Use this function to dry run a command (in dry run mode), instead of actually running the command.
# Based on global "DRY_RUN" variable
function dryrun() {
    if [[ "$DRY_RUN" = "true" ]]; then
        local DEBUG_PRINT=false
        >&2 echo DRY RUNNING: "${@:1}"
        return
    fi

    "$@"
}

function _git() {
    git -C "projects/${project}" "$@"
}

function reset_git() {
    git checkout -- releases/*
    git reset --keep "${base_commit}" > /dev/null
}

function in_project_repo() {
    (cd "projects/${project}" && "$@")
}

function clone_repo() {
    [[ -d "projects/${project}" ]] && rm -rf "projects/${project}"

    mkdir -p projects
    git clone "https://github.com/${ORG}/${project}" "projects/${project}"
    _git config advice.detachedHead false
}

function checkout_project_branch() {
    local default_branch="origin/${release['branch']:-devel}"
    local branch="${release["components.${project}"]:-${default_branch}}"

    _git reset --hard HEAD
    _git checkout "${branch}"
}

function validate_semver() {
    local DEBUG_PRINT=false
    local ver="(0|[1-9][0-9]*)"
    local regex="^${ver}\.${ver}\.${ver}(-([0-9a-zA-Z.-]*))?$"
    [[ "$1" =~ ${regex} ]] || exit_error "Version ${1@Q} is not a valid semantic version"
}

function extract_semver() {
    local DEBUG_PRINT=false
    declare -gA semver
    IFS=".-" read -r semver['major'] semver['minor'] semver['patch'] semver['pre'] <<< "$1"
}

function exit_on_branching() {
    [[ "${release['status']}" != "branch" ]] || exit 0
}

function gh_api() {
    local call="$1"
    local auth
    [[ -z "${GITHUB_TOKEN}" ]] || auth=(-H "Authorization: token ${GITHUB_TOKEN}")
    curl -sf "${auth[@]}" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${ORG}/${project}/${call}"
}

function gh_commit_sha() {
    local ref="$1"
    gh_api "commits/${ref}" | jq -r ".sha"
}

function for_every_project() {
    local func="$1"
    shift
    for project; do
        "${func}"
    done
}

function project_images() {
    make -C "projects/${project}" print-IMAGES | grep -oP "(?<=IMAGES = ).+"
}
